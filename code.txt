Directory Structure:
-------------------
/
├── .husky/
│   └── pre-commit
├── .vscode/
│   └── launch.json
├── public/
│   └── vite.svg
├── scripts/
│   └── openapi.js
├── src/
│   ├── assets/
│   │   ├── logo-dark.png
│   │   └── logo.png
│   ├── common/
│   │   ├── cookie.ts
│   │   └── pino.ts
│   ├── components/
│   │   ├── FileUpload/
│   │   │   ├── FileList.tsx
│   │   │   ├── FileUpload.tsx
│   │   │   └── FileView.tsx
│   │   ├── Header/
│   │   │   └── Header.tsx
│   │   ├── ui/
│   │   │   ├── alert-dialog.tsx
│   │   │   ├── alert.tsx
│   │   │   ├── avatar.tsx
│   │   │   ├── badge.tsx
│   │   │   ├── button.tsx
│   │   │   ├── card.tsx
│   │   │   ├── dropdown-menu.tsx
│   │   │   ├── input.tsx
│   │   │   ├── label.tsx
│   │   │   ├── sonner.tsx
│   │   │   └── textarea.tsx
│   │   ├── ImageViewer.tsx
│   │   ├── Loader.tsx
│   │   └── Logo.tsx
│   ├── generated/
│   │   ├── client.gen.ts
│   │   ├── index.ts
│   │   ├── sdk.gen.ts
│   │   └── types.gen.ts
│   ├── hooks/
│   │   └── useSettings.tsx
│   ├── layout/
│   │   └── DefaultLayout.tsx
│   ├── lib/
│   │   └── utils.ts
│   ├── middlewares/
│   │   └── AuthMiddleware.tsx
│   ├── pages/
│   │   ├── AiBot.tsx
│   │   ├── Dashboard.tsx
│   │   ├── Login.tsx
│   │   ├── NotFound.tsx
│   │   ├── Register.tsx
│   │   └── Settings.tsx
│   ├── redux/
│   │   ├── slices/
│   │   │   ├── authSlice.ts
│   │   │   ├── fileSlice.ts
│   │   │   └── userSlice.ts
│   │   └── store.ts
│   ├── routes/
│   │   └── route.tsx
│   ├── schemas/
│   │   ├── auth.schema.ts
│   │   └── settings.schema.ts
│   ├── types/
│   │   └── types.ts
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── .env
├── .env.example
├── .gitignore
├── .prettierignore
├── .prettierrc
├── code-structure.txt
├── code.txt
├── components.json
├── eslint.config.mjs
├── index.html
├── package.json
├── README.md
├── tsconfig.json
└── vite.config.ts


File Contents:
--------------
File: ./index.html
--------------------------------------------------
Content of ./index.html:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


File: ./.prettierignore
--------------------------------------------------
Content of ./.prettierignore:
# Ignore artifacts:
node_modules
build
coverage
dist

File: ./README.md
--------------------------------------------------
Content of ./README.md:
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```


File: ./.gitignore
--------------------------------------------------
Content of ./.gitignore:
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.dev
.env.test
.env.prod
.env.backup

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Jetbrains
.idea

# VS Code
.vscode

# Snyk Cache
.dccache

build
dist
stats.html

File: ./package.json
--------------------------------------------------
Content of ./package.json:
{
  "name": "react-boilerplate",
  "version": "1.0.0",
  "private": true,
  "author": "Talha Akhter",
  "license": "ISC",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "api:gen": "node ./scripts/openapi.js"
  },
  "dependencies": {
    "@hey-api/client-fetch": "^0.8.4",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.2.0",
    "@reduxjs/toolkit": "^2.6.1",
    "@tailwindcss/vite": "^4.0.17",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "eslint-plugin-import": "^2.31.0",
    "framer-motion": "^12.23.13",
    "js-cookie": "^3.0.5",
    "jwt-decode": "^4.0.0",
    "libphonenumber-js": "^1.12.6",
    "lucide-react": "^0.484.0",
    "next-themes": "^0.4.6",
    "pino": "^9.6.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.3.8",
    "react-hook-form": "^7.54.2",
    "react-phone-number-input": "^3.4.12",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.4.0",
    "shadcn-ui": "^0.9.5",
    "sonner": "^2.0.2",
    "tailwind-merge": "^3.0.2",
    "tailwind-variants": "^1.0.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@eslint/js": "^9.23.0",
    "@hey-api/openapi-ts": "^0.64.15",
    "@types/js-cookie": "^3.0.6",
    "@types/node": "^22.13.14",
    "@types/react": "^18.3.1",
    "@types/react-dom": "^18.3.1",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react-swc": "^3.8.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.23.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.2.0",
    "globals": "^16.0.0",
    "husky": "^9.1.7",
    "lint-staged": "^15.5.0",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "pretty-quick": "^4.1.1",
    "tailwindcss": "^4.1.3",
    "typescript": "~5.8.2",
    "typescript-eslint": "^8.28.0",
    "vite": "^6.2.3"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  }
}


File: ./.env
--------------------------------------------------
Content of ./.env:
PORT=3002
REACT_APP_ENVIRONMENT=local
REACT_APP_API_URL=http://localhost:5000
REACT_APP_API_PATH=api
VITE_APP_ENVIRONMENT=development
VITE_BACKEND_API_URL=http://localhost:5000


File: ./.prettierrc
--------------------------------------------------
Content of ./.prettierrc:
{
  "bracketSameLine": false,
  "bracketSpacing": true,
  "endOfLine": "lf",
  "semi": true,
  "singleQuote": false,
  "tabWidth": 2,
  "trailingComma": "all",
  "useTabs": false,
  "printWidth": 100,
  "arrowParens": "always",
  "embeddedLanguageFormatting": "auto"
}


File: ./components.json
--------------------------------------------------
Content of ./components.json:
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

File: ./tsconfig.json
--------------------------------------------------
Content of ./tsconfig.json:
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": { "@/*": ["./src/*"] }
  },
  "include": ["src"]
}


File: ./.env.example
--------------------------------------------------
Content of ./.env.example:
REACT_APP_ENVIRONMENT=REACT_APP_ENVIRONMENT
REACT_APP_API_URL=REACT_APP_API_URL

File: ./vite.config.ts
--------------------------------------------------
Content of ./vite.config.ts:
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    rollupOptions: {
      output: {
        manualChunks: (id) => {
          if (id.includes('node_modules')) {
            if (id.includes('react') || id.includes('react-dom')) {
              return 'vendor-react';
            }
            if (id.includes('@radix-ui')) {
              return 'vendor-radix';
            }
            if (id.includes('lucide-react')) {
              return 'vendor-lucide';
            }
            if (id.includes('@hey-api')) {
              return 'vendor-api';
            }
            return 'vendor'; // all other node_modules
          }
          if (id.includes('src/pages')) {
            return 'pages';
          }
          if (id.includes('src/components')) {
            return 'components';
          }
        },
      },
    },
    chunkSizeWarningLimit: 800,
  },
});

File: ./eslint.config.mjs
--------------------------------------------------
Content of ./eslint.config.mjs:
import globals from "globals";
import pluginJs from "@eslint/js";
import tseslint from "typescript-eslint";
import pluginReact from "eslint-plugin-react";
import importPlugin from "eslint-plugin-import";


/** @type {import('eslint').Linter.Config[]} */
export default [
  { files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"] },
  { languageOptions: { globals: globals.browser } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
  {
    plugins: {
      importPlugin
    },
    "rules": {
      "accessor-pairs": ["error"],
      // "array-bracket-newline": ["error"],
      "array-bracket-spacing": ["error"],
      "array-callback-return": ["error"],
      // "array-element-newline": ["error"],
      // "arrow-body-style": ["error"],
      "arrow-parens": ["error"],
      "arrow-spacing": ["error"],
      "block-scoped-var": ["error"],
      "block-spacing": ["error"],
      // "brace-style": ["error"],
      "camelcase": ["error"],
      "capitalized-comments": ["error"],
      // "class-methods-use-this": "off",
      "comma-dangle": ["error"],
      "comma-spacing": ["error"],
      // "comma-style": ["error"],
      "computed-property-spacing": ["error"],
      "consistent-this": ["error"],
      "constructor-super": ["error"],
      "curly": ["error"],
      "default-case": ["error"],
      "default-case-last": ["error"],
      // "default-param-last": ["error"],
      "dot-location": ["error"],
      "dot-notation": ["error"],
      "eol-last": ["error"],
      "eqeqeq": ["error"],
      "for-direction": ["error"],
      "func-call-spacing": ["error"],
      "func-name-matching": ["error"],
      "func-names": ["error"],
      // "function-call-argument-newline": ["error"],
      // "function-paren-newline": ["error"],
      "generator-star-spacing": ["error"],
      "getter-return": ["error"],
      "global-require": ["error"],
      "grouped-accessor-pairs": ["error"],
      "guard-for-in": ["error"],
      "handle-callback-err": ["error"],
      "id-blacklist": ["error"],
      "id-denylist": ["error"],
      "id-match": ["error"],
      // "implicit-arrow-linebreak": ["error"],
      "indent": ["error"],
      // "indent-legacy": ["error"],
      // "init-declarations": ["error"],
      "jsx-quotes": ["error"],
      "key-spacing": ["error"],
      "keyword-spacing": ["error"],
      // "linebreak-style": ["error"],
      // "lines-around-comment": ["error"],
      // "lines-around-directive": ["error"],
      "lines-between-class-members": "off",
      "logical-assignment-operators": ["error"],
      "max-classes-per-file": ["error"],
      "max-depth": ["error"],
      // "max-lines": ["error"],
      "max-nested-callbacks": ["error"],
      // "max-statements-per-line": ["error"],
      // "multiline-comment-style": ["error"],
      "multiline-ternary": ["error"],
      "new-parens": ["error"],
      // "newline-after-var": ["error"],
      // "newline-before-return": ["error"],
      // "newline-per-chained-call": ["error"],
      "no-alert": ["error"],
      "no-array-constructor": ["error"],
      "no-async-promise-executor": ["error"],
      "no-await-in-loop": ["error"],
      "no-bitwise": ["error"],
      "no-buffer-constructor": ["error"],
      "no-caller": ["error"],
      "no-case-declarations": ["error"],
      "no-catch-shadow": ["error"],
      "no-class-assign": ["error"],
      "no-compare-neg-zero": ["error"],
      "no-cond-assign": ["error"],
      "no-confusing-arrow": ["error"],
      "no-const-assign": ["error"],
      "no-constant-binary-expression": ["error"],
      "no-constant-condition": ["error"],
      "no-constructor-return": ["error"],
      "no-continue": ["error"],
      "no-control-regex": ["error"],
      "no-debugger": ["error"],
      "no-delete-var": ["error"],
      "no-div-regex": ["error"],
      "no-dupe-args": ["error"],
      "no-dupe-class-members": ["error"],
      "no-dupe-else-if": ["error"],
      "no-dupe-keys": ["error"],
      "no-duplicate-case": ["error"],
      "no-duplicate-imports": ["error"],
      "no-else-return": ["error"],
      "no-empty": ["error"],
      "no-empty-character-class": ["error"],
      "no-empty-function": ["error"],
      "no-empty-pattern": ["error"],
      "no-empty-static-block": ["error"],
      "no-eq-null": ["error"],
      "no-eval": ["error"],
      "no-ex-assign": ["error"],
      "no-extend-native": ["error"],
      "no-extra-bind": ["error"],
      "no-extra-boolean-cast": ["error"],
      "no-extra-label": ["error"],
      "no-extra-parens": ["error"],
      "no-extra-semi": ["error"],
      "no-fallthrough": ["error"],
      "no-floating-decimal": ["error"],
      "no-func-assign": ["error"],
      "no-global-assign": ["error"],
      "no-implicit-coercion": ["error"],
      "no-implicit-globals": ["error"],
      "no-implied-eval": ["error"],
      "no-import-assign": ["error"],
      "no-inner-declarations": ["error"],
      "no-invalid-regexp": ["error"],
      "no-invalid-this": ["error"],
      "no-irregular-whitespace": ["error"],
      "no-iterator": ["error"],
      "no-label-var": ["error"],
      "no-labels": ["error"],
      "no-lone-blocks": ["error"],
      "no-lonely-if": ["error"],
      "no-loop-func": ["error"],
      "no-loss-of-precision": ["error"],
      "no-misleading-character-class": ["error"],
      "no-mixed-operators": ["error"],
      "no-mixed-requires": ["error"],
      "no-mixed-spaces-and-tabs": ["error"],
      "no-multi-assign": ["error"],
      "no-multi-spaces": ["error"],
      "no-multi-str": ["error"],
      "no-multiple-empty-lines": ["error", { max: 1 }],
      "no-native-reassign": ["error"],
      // "no-negated-condition": ["error"],
      "no-negated-in-lhs": ["error"],
      "no-new": ["error"],
      "no-new-func": ["error"],
      "no-new-native-nonconstructor": ["error"],
      "no-new-object": ["error"],
      "no-new-require": ["error"],
      "no-new-symbol": ["error"],
      "no-new-wrappers": ["error"],
      "no-nonoctal-decimal-escape": ["error"],
      "no-obj-calls": ["error"],
      "no-object-constructor": ["error"],
      "no-octal": ["error"],
      "no-octal-escape": ["error"],
      "no-param-reassign": ["error"],
      "no-path-concat": ["error"],
      "no-plusplus": ["error"],
      "no-process-exit": ["error"],
      "no-promise-executor-return": ["error"],
      "no-proto": ["error"],
      "no-prototype-builtins": ["error"],
      "no-redeclare": ["error"],
      "no-regex-spaces": ["error"],
      "no-restricted-exports": ["error"],
      "no-restricted-globals": ["error"],
      "no-restricted-imports": ["error"],
      "no-restricted-modules": ["error"],
      "no-restricted-properties": ["error"],
      "no-restricted-syntax": ["error"],
      "no-return-assign": ["error"],
      "no-return-await": ["error"],
      "no-script-url": ["error"],
      "no-self-assign": ["error"],
      "no-self-compare": ["error"],
      "no-sequences": ["error"],
      "no-setter-return": ["error"],
      "no-shadow": ["error"],
      "no-shadow-restricted-names": ["error"],
      "no-spaced-func": ["error"],
      "no-sparse-arrays": ["error"],
      "no-sync": "off",
      "no-tabs": ["error"],
      "no-template-curly-in-string": ["error"],
      "no-this-before-super": ["error"],
      "no-throw-literal": ["error"],
      "no-trailing-spaces": ["error"],
      "no-undef-init": ["error"],
      // "no-undefined": ["error"],
      "no-underscore-dangle": ["error"],
      "no-unexpected-multiline": ["error"],
      "no-unmodified-loop-condition": ["error"],
      "no-unneeded-ternary": ["error"],
      "no-unreachable": ["error"],
      "no-unreachable-loop": ["error"],
      "no-unsafe-finally": ["error"],
      "no-unsafe-negation": ["error"],
      "no-unsafe-optional-chaining": ["error"],
      "no-unused-expressions": "off",
      "@typescript-eslint/no-unused-expressions": ["error", { "allowShortCircuit": true }],
      "no-unused-labels": ["error"],
      "no-unused-private-class-members": ["error"],
      "no-use-before-define": ["error"],
      "no-useless-backreference": ["error"],
      "no-useless-call": ["error"],
      "no-useless-catch": ["error"],
      "no-useless-computed-key": ["error"],
      "no-useless-concat": ["error"],
      "no-useless-constructor": ["error"],
      "no-useless-escape": ["error"],
      "no-useless-rename": ["error"],
      "no-useless-return": ["error"],
      "no-var": ["error"],
      "no-void": ["error"],
      "no-warning-comments": ["error"],
      "no-whitespace-before-property": ["error"],
      "no-with": ["error"],
      "nonblock-statement-body-position": ["error"],
      // "object-curly-newline": ["error"],
      // "object-curly-spacing": ["error"],
      // "object-property-newline": ["error"],
      "object-shorthand": ["error"],
      "one-var-declaration-per-line": ["error"],
      "operator-assignment": ["error"],
      // "operator-linebreak": ["error"],
      "padded-blocks": "off",
      "padding-line-between-statements": "off",
      "prefer-arrow-callback": ["error"],
      "prefer-const": ["error"],
      "prefer-destructuring": ["error"],
      "prefer-exponentiation-operator": ["error"],
      "prefer-numeric-literals": ["error"],
      "prefer-object-has-own": ["error"],
      "prefer-object-spread": ["error"],
      "prefer-promise-reject-errors": ["error"],
      "prefer-reflect": ["error"],
      "prefer-regex-literals": ["error"],
      "prefer-rest-params": ["error"],
      "prefer-spread": ["error"],
      "prefer-template": ["error"],
      "quote-props": ["error"],
      "quotes": ["error"],
      "radix": ["error"],
      // "require-atomic-updates": "off",
      "require-yield": ["error"],
      "rest-spread-spacing": ["error"],
      "semi": ["error"],
      "semi-spacing": ["error"],
      // "semi-style": ["error"],
      "sort-imports": ["off"],
      // "space-before-blocks": ["error"],
      // "space-before-function-paren": ["error"],
      // "space-in-parens": ["error"],
      // "space-infix-ops": ["error"],
      // "space-unary-ops": ["error"],
      // "spaced-comment": ["error"],
      "strict": ["error"],
      // "switch-colon-spacing": ["error"],
      // "symbol-description": ["error"],
      // "template-curly-spacing": ["error"],
      // "template-tag-spacing": ["error"],
      "unicode-bom": ["error"],
      "use-isnan": ["error"],
      "valid-typeof": ["error"],
      "vars-on-top": ["error"],
      "wrap-iife": ["error"],
      "wrap-regex": ["error"],
      // "yield-star-spacing": ["error"],
      "yoda": ["error"],
    }
  }
];

File: .husky/pre-commit
--------------------------------------------------
Content of .husky/pre-commit:
npx lint-staged


File: .husky/_/pre-rebase
--------------------------------------------------
Content of .husky/_/pre-rebase:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/pre-applypatch
--------------------------------------------------
Content of .husky/_/pre-applypatch:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/husky.sh
--------------------------------------------------
Content of .husky/_/husky.sh:
echo "husky - DEPRECATED

Please remove the following two lines from $0:

#!/usr/bin/env sh
. \"\$(dirname -- \"\$0\")/_/husky.sh\"

They WILL FAIL in v10.0.0
"

File: .husky/_/pre-auto-gc
--------------------------------------------------
Content of .husky/_/pre-auto-gc:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/pre-merge-commit
--------------------------------------------------
Content of .husky/_/pre-merge-commit:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/post-commit
--------------------------------------------------
Content of .husky/_/post-commit:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/applypatch-msg
--------------------------------------------------
Content of .husky/_/applypatch-msg:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/prepare-commit-msg
--------------------------------------------------
Content of .husky/_/prepare-commit-msg:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/h
--------------------------------------------------
Content of .husky/_/h:
#!/usr/bin/env sh
[ "$HUSKY" = "2" ] && set -x
n=$(basename "$0")
s=$(dirname "$(dirname "$0")")/$n

[ ! -f "$s" ] && exit 0

if [ -f "$HOME/.huskyrc" ]; then
	echo "husky - '~/.huskyrc' is DEPRECATED, please move your code to ~/.config/husky/init.sh"
fi
i="${XDG_CONFIG_HOME:-$HOME/.config}/husky/init.sh"
[ -f "$i" ] && . "$i"

[ "${HUSKY-}" = "0" ] && exit 0

export PATH="node_modules/.bin:$PATH"
sh -e "$s" "$@"
c=$?

[ $c != 0 ] && echo "husky - $n script failed (code $c)"
[ $c = 127 ] && echo "husky - command not found in PATH=$PATH"
exit $c


File: .husky/_/post-checkout
--------------------------------------------------
Content of .husky/_/post-checkout:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/post-applypatch
--------------------------------------------------
Content of .husky/_/post-applypatch:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/.gitignore
--------------------------------------------------
Content of .husky/_/.gitignore:
*

File: .husky/_/post-rewrite
--------------------------------------------------
Content of .husky/_/post-rewrite:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/commit-msg
--------------------------------------------------
Content of .husky/_/commit-msg:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/pre-push
--------------------------------------------------
Content of .husky/_/pre-push:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/post-merge
--------------------------------------------------
Content of .husky/_/post-merge:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: .husky/_/pre-commit
--------------------------------------------------
Content of .husky/_/pre-commit:
#!/usr/bin/env sh
. "$(dirname "$0")/h"

File: public/vite.svg
--------------------------------------------------
Content of public/vite.svg:
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

File: scripts/openapi.js
--------------------------------------------------
Content of scripts/openapi.js:
import { createClient } from '@hey-api/openapi-ts';
const args = process.argv;

createClient({
  input: args.at(-1),
  output: 'src/generated',
  plugins: ['@hey-api/client-fetch'],
});

// npm run api:gen http://localhost:5000/docs/swagger.json


File: .vscode/launch.json
--------------------------------------------------
Content of .vscode/launch.json:
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "chrome",
            "request": "launch",
            "name": "Launch Chrome against localhost",
            "url": "http://localhost:3002",
            "webRoot": "${workspaceFolder}/src"
        }
    ]
}

File: src/App.tsx
--------------------------------------------------
Content of src/App.tsx:
import React from "react";
import { BrowserRouter as Router } from "react-router-dom";
import AppRoutes from "./routes/route";

const App: React.FC = () => {
  return (
    <Router>
      <AppRoutes />
    </Router>
  );
};

export default App;


File: src/main.tsx
--------------------------------------------------
Content of src/main.tsx:
import React from "react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";
import App from "./App";
import "./index.css";
import store from "./redux/store";
import { Toaster } from "sonner";
import { ThemeProvider } from "next-themes";
import "react-phone-number-input/style.css";

createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ThemeProvider defaultTheme="light" attribute="class">
      <Provider store={store}>
        <Toaster richColors />
        <App />
      </Provider>
    </ThemeProvider>
  </React.StrictMode>,
);


File: src/index.css
--------------------------------------------------
Content of src/index.css:
@import "tailwindcss";

@custom-variant dark (&:is(.dark *));

.react-phone-input input {
  @apply file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive
}

/* .react-phone-input input:focus {
  @apply ring-2 ring-ring ring-offset-2;
} */

.react-phone-input .PhoneInputCountryIcon {
  @apply mr-2;
}

.react-phone-input .phoneCountry {
  @apply rounded-l-md border-r border-input;
}

:root {
  --radius: 0.5rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


File: src/vite-env.d.ts
--------------------------------------------------
Content of src/vite-env.d.ts:
/// <reference types="vite/client" />


File: src/generated/client.gen.ts
--------------------------------------------------
Content of src/generated/client.gen.ts:
// This file is auto-generated by @hey-api/openapi-ts

import { getTokenFromCookie } from '@/common/cookie';
import type { ClientOptions } from './types.gen';
import { type Config, type ClientOptions as DefaultClientOptions, createClient, createConfig } from '@hey-api/client-fetch';

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> = (override?: Config<DefaultClientOptions & T>) => Config<Required<DefaultClientOptions> & T>;

const token = getTokenFromCookie();

export const client = createClient(createConfig<ClientOptions>({
    baseUrl: 'http://localhost:5000/api',
    headers: {
        ...(token ? { Authorization: `Bearer ${token}` } : {}),
    },
}));

File: src/generated/types.gen.ts
--------------------------------------------------
Content of src/generated/types.gen.ts:
// This file is auto-generated by @hey-api/openapi-ts

export type Health = unknown;

export type Auth = {
    email: string;
    password: string;
};

export type Users = {
    id: string;
    email: string;
    password: string;
    roleId: string;
    tenantId: string;
    name: string;
    phoneNumber: string;
    bio: string;
    resetToken: string;
    deletedAt: string;
    createdAt: string;
    updatedAt: string;
};

export type Files = {
    id: string;
    userId: string;
    name: string;
    path: string;
    text: string;
    tags: string;
    views: number;
    createdAt: string;
    updatedAt: string;
};

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetHealthClearCacheData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/clear-cache';
};

export type GetHealthClearCacheResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type GetHealthClearCacheResponse = GetHealthClearCacheResponses[keyof GetHealthClearCacheResponses];

export type GetHealthClearLogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/clear-logs';
};

export type GetHealthClearLogsResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type GetHealthClearLogsResponse = GetHealthClearLogsResponses[keyof GetHealthClearLogsResponses];

export type PostAuthLoginData = {
    body?: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type PostAuthLoginResponses = {
    /**
     * Login Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            user: {
                id: string;
                email: string;
                password: string;
                roleId: string;
                tenantId: string;
                name: string;
                phoneNumber: string;
                bio: string;
                resetToken: string;
                deletedAt: string;
                createdAt: string;
                updatedAt: string;
            };
            token: string;
        };
    };
};

export type PostAuthLoginResponse = PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthRegisterData = {
    body?: {
        name: string;
        email: string;
        password: string;
        confirmPassword: string;
    };
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type PostAuthRegisterResponses = {
    /**
     * Register Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            user: {
                id: string;
                email: string;
                password: string;
                roleId: string;
                tenantId: string;
                name: string;
                phoneNumber: string;
                bio: string;
                resetToken: string;
                deletedAt: string;
                createdAt: string;
                updatedAt: string;
            };
            token: string;
        };
    };
};

export type PostAuthRegisterResponse = PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type PostAuthExtendTokenData = {
    body?: {
        token: string;
    };
    path?: never;
    query?: never;
    url: '/auth/extend-token';
};

export type PostAuthExtendTokenResponses = {
    /**
     * Token Extended Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            token: string;
        };
    };
};

export type PostAuthExtendTokenResponse = PostAuthExtendTokenResponses[keyof PostAuthExtendTokenResponses];

export type GetAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type GetAuthLogoutResponses = {
    /**
     * Logout Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            success: boolean;
        };
    };
};

export type GetAuthLogoutResponse = GetAuthLogoutResponses[keyof GetAuthLogoutResponses];

export type PostAuthForgotPasswordData = {
    body?: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/forgot-password';
};

export type PostAuthForgotPasswordResponses = {
    /**
     * Reset link sent. Check you email
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            email: string;
        };
    };
};

export type PostAuthForgotPasswordResponse = PostAuthForgotPasswordResponses[keyof PostAuthForgotPasswordResponses];

export type PostAuthResetPasswordData = {
    body?: {
        resetToken: string;
        password: string;
        confirmPassword: string;
    };
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type PostAuthResetPasswordResponses = {
    /**
     * Password reset successful
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            resetToken: string;
            password: string;
            confirmPassword: string;
        };
    };
};

export type PostAuthResetPasswordResponse = PostAuthResetPasswordResponses[keyof PostAuthResetPasswordResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetUsersResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: Array<{
            id: string;
            email: string;
            password: string;
            roleId: string;
            tenantId: string;
            name: string;
            phoneNumber: string;
            bio: string;
            resetToken: string;
            deletedAt: string;
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersData = {
    body?: {
        email?: string;
        password?: string;
        roleId?: string;
        tenantId?: string;
        name?: string;
        phoneNumber?: string;
        bio?: string;
        resetToken?: string;
        deletedAt?: string;
    };
    path?: never;
    query?: never;
    url: '/users';
};

export type PostUsersResponses = {
    /**
     * Users Created Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            email?: string;
            password?: string;
            roleId?: string;
            tenantId?: string;
            name?: string;
            phoneNumber?: string;
            bio?: string;
            resetToken?: string;
            deletedAt?: string;
        };
    };
};

export type PostUsersResponse = PostUsersResponses[keyof PostUsersResponses];

export type PostUsersImportData = {
    body?: {
        /**
         * The file to upload
         */
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/users/import';
};

export type PostUsersImportResponses = {
    /**
     * Userss Imported Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type PostUsersImportResponse = PostUsersImportResponses[keyof PostUsersImportResponses];

export type GetUsersExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/export';
};

export type GetUsersExportResponses = {
    /**
     * Userss Exported Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type GetUsersExportResponse = GetUsersExportResponses[keyof GetUsersExportResponses];

export type DeleteUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type DeleteUsersByIdResponses = {
    /**
     * Users Deleted Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type DeleteUsersByIdResponse = DeleteUsersByIdResponses[keyof DeleteUsersByIdResponses];

export type GetUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUsersByIdResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            id: string;
            email: string;
            password: string;
            roleId: string;
            tenantId: string;
            name: string;
            phoneNumber: string;
            bio: string;
            resetToken: string;
            deletedAt: string;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type GetUsersByIdResponse = GetUsersByIdResponses[keyof GetUsersByIdResponses];

export type PutUsersByIdData = {
    body?: {
        email?: string;
        roleId?: string;
        tenantId?: string;
        name?: string;
        phoneNumber?: string;
        bio?: string;
        resetToken?: string;
        deletedAt?: string;
        updatedAt?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type PutUsersByIdResponses = {
    /**
     * Users Updated Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            id: string;
            email: string;
            password: string;
            roleId: string;
            tenantId: string;
            name: string;
            phoneNumber: string;
            bio: string;
            resetToken: string;
            deletedAt: string;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type PutUsersByIdResponse = PutUsersByIdResponses[keyof PutUsersByIdResponses];

export type GetUsersEmailByEmailData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/users/email/{email}';
};

export type GetUsersEmailByEmailResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            id: string;
            email: string;
            password: string;
            roleId: string;
            tenantId: string;
            name: string;
            phoneNumber: string;
            bio: string;
            resetToken: string;
            deletedAt: string;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type GetUsersEmailByEmailResponse = GetUsersEmailByEmailResponses[keyof GetUsersEmailByEmailResponses];

export type PostUsersFindData = {
    body?: {
        filter: {
            [key: string]: unknown;
        };
        paginate?: {
            page?: number;
            perPage?: number;
        };
        orderBy?: Array<{
            sort?: string;
            order: 'asc' | 'desc';
        }>;
    };
    path?: never;
    query?: never;
    url: '/users/find';
};

export type PostUsersFindResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: Array<{
            filter: {
                [key: string]: unknown;
            };
            paginate?: {
                page?: number;
                perPage?: number;
            };
            orderBy?: Array<{
                sort?: string;
                order: 'asc' | 'desc';
            }>;
        }>;
    };
};

export type PostUsersFindResponse = PostUsersFindResponses[keyof PostUsersFindResponses];

export type DeleteUsersBulkData = {
    body?: {
        ids: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/users/bulk';
};

export type DeleteUsersBulkResponses = {
    /**
     * Userss Deleted Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type DeleteUsersBulkResponse = DeleteUsersBulkResponses[keyof DeleteUsersBulkResponses];

export type GetFilesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/files';
};

export type GetFilesResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: Array<{
            id: string;
            userId: string;
            name: string;
            path: string;
            text: string;
            tags: string;
            views: number;
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetFilesResponse = GetFilesResponses[keyof GetFilesResponses];

export type DeleteFilesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/files/{id}';
};

export type DeleteFilesByIdResponses = {
    /**
     * Files Deleted Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: unknown;
    };
};

export type DeleteFilesByIdResponse = DeleteFilesByIdResponses[keyof DeleteFilesByIdResponses];

export type GetFilesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/files/{id}';
};

export type GetFilesByIdResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            id: string;
            userId: string;
            name: string;
            path: string;
            text: string;
            tags: string;
            views: number;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type GetFilesByIdResponse = GetFilesByIdResponses[keyof GetFilesByIdResponses];

export type PutFilesByIdData = {
    body?: {
        userId?: string;
        name?: string;
        tags?: string;
        /**
         * The file to upload
         */
        file?: Blob | File;
        views?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/files/{id}';
};

export type PutFilesByIdResponses = {
    /**
     * File updated Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            userId?: string;
            name?: string;
            tags?: string;
            /**
             * The file to upload
             */
            file?: Blob | File;
            views?: string;
        };
    };
};

export type PutFilesByIdResponse = PutFilesByIdResponses[keyof PutFilesByIdResponses];

export type GetFilesUserByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/files/user/{userId}';
};

export type GetFilesUserByUserIdResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: Array<{
            id: string;
            userId: string;
            name: string;
            path: string;
            text: string;
            tags: string;
            views: number;
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetFilesUserByUserIdResponse = GetFilesUserByUserIdResponses[keyof GetFilesUserByUserIdResponses];

export type PostFilesFindData = {
    body?: {
        filter: {
            [key: string]: unknown;
        };
        paginate?: {
            page?: number;
            perPage?: number;
        };
        orderBy?: Array<{
            sort?: string;
            order: 'asc' | 'desc';
        }>;
    };
    path?: never;
    query?: never;
    url: '/files/find';
};

export type PostFilesFindResponses = {
    /**
     * Success
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: Array<{
            filter: {
                [key: string]: unknown;
            };
            paginate?: {
                page?: number;
                perPage?: number;
            };
            orderBy?: Array<{
                sort?: string;
                order: 'asc' | 'desc';
            }>;
        }>;
    };
};

export type PostFilesFindResponse = PostFilesFindResponses[keyof PostFilesFindResponses];

export type PostFilesUploadData = {
    body?: {
        userId?: string;
        name?: string;
        tags?: string;
        /**
         * The file to upload
         */
        file?: Blob | File;
        views?: string;
    };
    path?: never;
    query?: never;
    url: '/files/upload';
};

export type PostFilesUploadResponses = {
    /**
     * File uploaded Successfully
     */
    200: {
        success: boolean;
        statusCode: number;
        message: string;
        data?: {
            userId?: string;
            name?: string;
            tags?: string;
            /**
             * The file to upload
             */
            file?: Blob | File;
            views?: string;
        };
    };
};

export type PostFilesUploadResponse = PostFilesUploadResponses[keyof PostFilesUploadResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:5000/api' | 'https://localhost:5000/api' | (string & {});
};

File: src/generated/sdk.gen.ts
--------------------------------------------------
Content of src/generated/sdk.gen.ts:
// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetHealthData, GetHealthResponse, GetHealthClearCacheData, GetHealthClearCacheResponse, GetHealthClearLogsData, GetHealthClearLogsResponse, PostAuthLoginData, PostAuthLoginResponse, PostAuthRegisterData, PostAuthRegisterResponse, PostAuthExtendTokenData, PostAuthExtendTokenResponse, GetAuthLogoutData, GetAuthLogoutResponse, PostAuthForgotPasswordData, PostAuthForgotPasswordResponse, PostAuthResetPasswordData, PostAuthResetPasswordResponse, GetUsersData, GetUsersResponse, PostUsersData, PostUsersResponse, PostUsersImportData, PostUsersImportResponse, GetUsersExportData, GetUsersExportResponse, DeleteUsersByIdData, DeleteUsersByIdResponse, GetUsersByIdData, GetUsersByIdResponse, PutUsersByIdData, PutUsersByIdResponse, GetUsersEmailByEmailData, GetUsersEmailByEmailResponse, PostUsersFindData, PostUsersFindResponse, DeleteUsersBulkData, DeleteUsersBulkResponse, GetFilesData, GetFilesResponse, DeleteFilesByIdData, DeleteFilesByIdResponse, GetFilesByIdData, GetFilesByIdResponse, PutFilesByIdData, PutFilesByIdResponse, GetFilesUserByUserIdData, GetFilesUserByUserIdResponse, PostFilesFindData, PostFilesFindResponse, PostFilesUploadData, PostFilesUploadResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get health check
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponse, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Clear cache
 */
export const getHealthClearCache = <ThrowOnError extends boolean = false>(options?: Options<GetHealthClearCacheData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthClearCacheResponse, unknown, ThrowOnError>({
        url: '/health/clear-cache',
        ...options
    });
};

/**
 * Clear log files
 */
export const getHealthClearLogs = <ThrowOnError extends boolean = false>(options?: Options<GetHealthClearLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthClearLogsResponse, unknown, ThrowOnError>({
        url: '/health/clear-logs',
        ...options
    });
};

/**
 * Login
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRegisterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Extend Token
 */
export const postAuthExtendToken = <ThrowOnError extends boolean = false>(options?: Options<PostAuthExtendTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthExtendTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/extend-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout
 */
export const getAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<GetAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

/**
 * Forgot Password
 */
export const postAuthForgotPassword = <ThrowOnError extends boolean = false>(options?: Options<PostAuthForgotPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthForgotPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset Password
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(options?: Options<PostAuthResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthResetPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all Users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create Users
 */
export const postUsers = <ThrowOnError extends boolean = false>(options?: Options<PostUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import Users
 */
export const postUsersImport = <ThrowOnError extends boolean = false>(options?: Options<PostUsersImportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersImportResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Export Users
 */
export const getUsersExport = <ThrowOnError extends boolean = false>(options?: Options<GetUsersExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersExportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/export',
        ...options
    });
};

/**
 * Delete Users
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get Users by id
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update Users
 */
export const putUsersById = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Users by email
 */
export const getUsersEmailByEmail = <ThrowOnError extends boolean = false>(options: Options<GetUsersEmailByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersEmailByEmailResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/email/{email}',
        ...options
    });
};

/**
 * Find Users by query
 */
export const postUsersFind = <ThrowOnError extends boolean = false>(options?: Options<PostUsersFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersFindResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/find',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Users in bulk
 */
export const deleteUsersBulk = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersBulkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUsersBulkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all Files
 */
export const getFiles = <ThrowOnError extends boolean = false>(options?: Options<GetFilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files',
        ...options
    });
};

/**
 * Delete Files
 */
export const deleteFilesById = <ThrowOnError extends boolean = false>(options: Options<DeleteFilesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFilesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/{id}',
        ...options
    });
};

/**
 * Get Files by id
 */
export const getFilesById = <ThrowOnError extends boolean = false>(options: Options<GetFilesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFilesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/{id}',
        ...options
    });
};

export const putFilesById = <ThrowOnError extends boolean = false>(options: Options<PutFilesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutFilesByIdResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/{id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get Files by userId
 */
export const getFilesUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetFilesUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFilesUserByUserIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/user/{userId}',
        ...options
    });
};

/**
 * Find Files by query
 */
export const postFilesFind = <ThrowOnError extends boolean = false>(options?: Options<PostFilesFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostFilesFindResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/find',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Files
 */
export const postFilesUpload = <ThrowOnError extends boolean = false>(options?: Options<PostFilesUploadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostFilesUploadResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

File: src/generated/index.ts
--------------------------------------------------
Content of src/generated/index.ts:
// This file is auto-generated by @hey-api/openapi-ts
export * from './types.gen';
export * from './sdk.gen';

File: src/types/types.ts
--------------------------------------------------
Content of src/types/types.ts:
import { JwtPayload } from "jwt-decode";
import { ReactNode } from "react";
export interface JwtUserPayload extends JwtPayload {
  id: string;
  email: string;
  name: string;
}

export interface DecodedToken {
  exp: number; // Token expiration time in seconds since the epoch
}

export interface LayoutProps {
  children: ReactNode;
}


File: src/layout/DefaultLayout.tsx
--------------------------------------------------
Content of src/layout/DefaultLayout.tsx:
import React, { useEffect } from "react";
import { Header } from "@/components/Header/Header";
import { LayoutProps } from "@/types/types";
import { useLocation, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { ArrowLeft } from "lucide-react";
import { isTokenValid } from "@/lib/utils";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";

export const DefaultLayout = ({ children }: LayoutProps) => {
  const location = useLocation();
  const navigate = useNavigate();
  const authToken = useSelector((state: RootState) => state.auth.token);

  useEffect(() => {
    if (!isTokenValid(authToken)) {
      navigate("/login");
    }
  }, [authToken]);

  const showBackButton = location.pathname !== "/dashboard";
  return (
    <div className="flex flex-col h-screen">
      <Header />
      <main className="flex-1 p-4 md:p-6 container mx-auto">
        <>
          <div className="flex items-center my-4">
            {showBackButton && (
              <Button variant="ghost" size="icon" onClick={() => navigate(-1)} className="mr-2">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            )}
            <h1 className="text-lg font-semibold">{showBackButton ? "Back" : "Dashboard"}</h1>
          </div>
          {children}
        </>
      </main>
    </div>
  );
};


File: src/middlewares/AuthMiddleware.tsx
--------------------------------------------------
Content of src/middlewares/AuthMiddleware.tsx:
import React from "react";
import { useSelector } from "react-redux";
import { RootState } from "../redux/store";
import { Navigate, Outlet } from "react-router-dom";

export const AuthMiddleware: React.FC = () => {
  const authToken = useSelector((state: RootState) => state.auth.token);

  return authToken ? <Outlet /> : <Navigate to="/login" replace />;
};


File: src/schemas/settings.schema.ts
--------------------------------------------------
Content of src/schemas/settings.schema.ts:
import { z } from "zod";
import { isValidPhoneNumber } from "libphonenumber-js";

export const settingsSchema = z.object({
  name: z.string().min(2, "Name is too short"),
  email: z.string().email("Invalid email"),
  phone: z.string().refine((val) => isValidPhoneNumber(val), {
    message: "Invalid phone number",
  }),
  bio: z.string().max(300).optional(),
});

export type SettingsSchema = z.infer<typeof settingsSchema>;


File: src/schemas/auth.schema.ts
--------------------------------------------------
Content of src/schemas/auth.schema.ts:
import { z } from "zod";

export const authSchema = z.object({
  email: z.string().email("Invalid email format"),
  password: z
    .string()
    .min(8, "Password must be at least 8 characters")
    .regex(/[a-z]/, "Password must have at least one lowercase letter")
    .regex(/[A-Z]/, "Password must have at least one uppercase letter")
    .regex(/\d/, "Password must have at least one number")
    .regex(/[@$!%*?&]/, "Password must have at least one special character"),
});

export const registerSchema = z
  .object({
    name: z.string().min(1, "Name must be at least 1 characters"),
    email: z.string().email("Invalid email format"),
    password: z
      .string()
      .min(8, "Password must be at least 8 characters")
      .regex(/[a-z]/, "Password must have at least one lowercase letter")
      .regex(/[A-Z]/, "Password must have at least one uppercase letter")
      .regex(/\d/, "Password must have at least one number")
      .regex(/[@$!%*?&]/, "Password must have at least one special character"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

export type AuthSchema = z.infer<typeof authSchema>;
export type RegisterSchema = z.infer<typeof registerSchema>;


File: src/components/ImageViewer.tsx
--------------------------------------------------
Content of src/components/ImageViewer.tsx:
import React from "react";
import { useNavigate } from "react-router-dom"; // Change to Next.js `useRouter` if needed
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Eye } from "lucide-react";
import { Files } from "@/generated";

interface ImageViewerProps {
  images: Files[];
}

export const ImageViewer: React.FC<ImageViewerProps> = ({ images }) => {
  const navigate = useNavigate(); // Change to `useRouter` for Next.js

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
      {images.map((image) => (
        <Card
          key={image.id}
          className="relative h-80 overflow-hidden rounded-lg shadow-md cursor-pointer transition-transform duration-300 hover:scale-105"
          onClick={() => navigate(`/image/${image.id}`)}
        >
          <img
            src={`${import.meta.env.VITE_BACKEND_API_URL}/${image.path}`}
            alt={image.name}
            className="absolute top-0 left-0 w-full h-full object-cover"
          />
          {/* Views & Tags Overlay */}
          <div className="absolute bottom-3 left-3 bg-black/60 px-3 py-2 rounded-md text-white flex items-center space-x-3">
            {/* <span className="flex items-center text-sm">
              <Eye className="h-4 w-4 mr-1" /> {image.views}
            </span> */}
            <div className="flex flex-wrap gap-1">
              {image.tags
                ? image.tags.split(",").map((tag, index) => (
                    <Badge key={index} className="bg-gray-700 text-white text-xs">
                      {tag}
                    </Badge>
                  ))
                : null}
            </div>
          </div>
        </Card>
      ))}
    </div>
  );
};


File: src/components/Loader.tsx
--------------------------------------------------
Content of src/components/Loader.tsx:
import React from "react";
import { cn } from "@/lib/utils";

export const Loader = ({ className }: { className?: string }) => {
  return (
    <div
      className={cn(
        "fixed inset-0 flex items-center justify-center z-50",
        "bg-background/80",
        className,
      )}
    >
      <div className="h-16 w-16 animate-spin rounded-full border-4 border-solid border-primary border-t-transparent"></div>
    </div>
  );
};


File: src/components/Logo.tsx
--------------------------------------------------
Content of src/components/Logo.tsx:
import React from "react";
import LogoLight from "../assets/logo.png";
import LogoDark from "../assets/logo-dark.png";

export const Logo = () => {
  return (
    <>
      <img src={LogoLight} alt="Logo" className="w-50 dark:hidden" />
      <img src={LogoDark} alt="Logo Dark" className="w-50 dark:block hidden" />
    </>
  );
};


File: src/components/ui/alert-dialog.tsx
--------------------------------------------------
Content of src/components/ui/alert-dialog.tsx:
import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function AlertDialog({ ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />;
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />;
}

function AlertDialogPortal({ ...props }: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />;
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      />
    </AlertDialogPortal>
  );
}

function AlertDialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function AlertDialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)}
      {...props}
    />
  );
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  );
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return <AlertDialogPrimitive.Action className={cn(buttonVariants(), className)} {...props} />;
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  );
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};


File: src/components/ui/card.tsx
--------------------------------------------------
Content of src/components/ui/card.tsx:
import * as React from "react";

import { cn } from "@/lib/utils";

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className,
      )}
      {...props}
    />
  );
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className,
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn("col-start-2 row-span-2 row-start-1 self-start justify-self-end", className)}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card-content" className={cn("px-6", className)} {...props} />;
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  );
}

export { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent };


File: src/components/ui/label.tsx
--------------------------------------------------
Content of src/components/ui/label.tsx:
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/lib/utils";

function Label({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className,
      )}
      {...props}
    />
  );
}

export { Label };


File: src/components/ui/sonner.tsx
--------------------------------------------------
Content of src/components/ui/sonner.tsx:
import React from "react";
import { useTheme } from "next-themes";
import { Toaster as Sonner, ToasterProps } from "sonner";

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };


File: src/components/ui/alert.tsx
--------------------------------------------------
Content of src/components/ui/alert.tsx:
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn("col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight", className)}
      {...props}
    />
  );
}

function AlertDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className,
      )}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };


File: src/components/ui/avatar.tsx
--------------------------------------------------
Content of src/components/ui/avatar.tsx:
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

function Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn("relative flex size-8 shrink-0 overflow-hidden rounded-full", className)}
      {...props}
    />
  );
}

function AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn("bg-muted flex size-full items-center justify-center rounded-full", className)}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };


File: src/components/ui/badge.tsx
--------------------------------------------------
Content of src/components/ui/badge.tsx:
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline: "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span";

  return (
    <Comp data-slot="badge" className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };


File: src/components/ui/button.tsx
--------------------------------------------------
Content of src/components/ui/button.tsx:
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary: "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp data-slot="button" className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
  }
);
Button.displayName = "Button";

// function Button({
//   className,
//   variant,
//   size,
//   asChild = false,
//   ...props
// }: React.ComponentProps<"button"> &
//   VariantProps<typeof buttonVariants> & {
//     asChild?: boolean;
//   }) {
//   const Comp = asChild ? Slot : "button";

//   return (
//     <Comp
//       data-slot="button"
//       className={cn(buttonVariants({ variant, size, className }))}
//       {...props}
//     />
//   );
// }

export { Button, buttonVariants };


File: src/components/ui/dropdown-menu.tsx
--------------------------------------------------
Content of src/components/ui/dropdown-menu.tsx:
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function DropdownMenu({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />;
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return <DropdownMenuPrimitive.Trigger data-slot="dropdown-menu-trigger" {...props} />;
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />;
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: "default" | "destructive";
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return <DropdownMenuPrimitive.RadioGroup data-slot="dropdown-menu-radio-group" {...props} />;
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn("px-2 py-1.5 text-sm font-medium data-[inset]:pl-8", className)}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props}
    />
  );
}

function DropdownMenuSub({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className,
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};


File: src/components/ui/textarea.tsx
--------------------------------------------------
Content of src/components/ui/textarea.tsx:
import * as React from "react";
import { cn } from "@/lib/utils";

// eslint-disable-next-line @typescript-eslint/no-empty-object-type
export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

export const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        ref={ref}
        data-slot="textarea"
        className={cn(
          "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        {...props}
      />
    );
  },
);

Textarea.displayName = "Textarea";


File: src/components/ui/input.tsx
--------------------------------------------------
Content of src/components/ui/input.tsx:
import * as React from "react";
import { cn } from "@/lib/utils";

// eslint-disable-next-line @typescript-eslint/no-empty-object-type
export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        ref={ref}
        type={type}
        data-slot="input"
        className={cn(
          "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
          "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
          className,
        )}
        {...props}
      />
    );
  },
);

Input.displayName = "Input";


File: src/components/FileUpload/FileView.tsx
--------------------------------------------------
Content of src/components/FileUpload/FileView.tsx:
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../ui/alert-dialog";
import { deleteFilesById, getFilesById, putFilesById } from "@/generated";

const FileView: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [imageDetails, setImageDetails] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [editing, setEditing] = useState<boolean>(false);
  const [tags, setTags] = useState<string>("");
  const [name, setName] = useState<string>("");

  useEffect(() => {
    const fetchImageDetails = async () => {
      try {
        const { data: filesResponse } = await getFilesById({
          path: {
            id: id!
          },
        });
        if (filesResponse && filesResponse.statusCode !== 200) {
          throw new Error(filesResponse?.message || 'Failed to fetch file details');
        }

        const { data } = filesResponse!;
        setImageDetails(data);
        setTags(data?.tags!);
        setName(data?.name!);
      } catch (error) {
        logger.error("Error fetching image details:", error);
        toast.error("Failed to load image details.");
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchImageDetails();
    }
  }, [id]);

  const handleUpdate = async () => {
    setLoading(true);
    const loadingToast = toast.loading("Updating account...");
    try {
      const { data: filesResponse } = await putFilesById({
        path: {
          id: id!
        },
        body: {
          name,
          tags,
        }
      });
      if (filesResponse?.statusCode !== 200) {
        throw new Error(filesResponse?.message || 'Failed to update file');
      }

      setImageDetails(filesResponse?.data);
      toast.success("Account updated successfully", { id: loadingToast });
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      toast.error(`Account update failed: ${error.message}`, { id: loadingToast });
    } finally {
      setEditing(false);
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    try {
      const { data: filesResponse } = await deleteFilesById({
        path: {
          id: id!
        },
      });
      if (filesResponse?.statusCode !== 200) {
        throw new Error(filesResponse?.message || 'Failed to delete file');
      }

      toast.success("File deleted successfully!");
      navigate("/dashboard");
    } catch (error) {
      logger.error("Delete failed:", error);
      toast.error("Delete failed!");
    }
  };

  if (!imageDetails) {
    return <div className="text-center p-4">No image found.</div>;
  }

  return (
    <div className="max-w-4xl">
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Image Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <img
            src={`${import.meta.env.VITE_BACKEND_API_URL}/${imageDetails.path}`}
            alt={imageDetails.name}
            className="w-full max-w-md rounded-md border"
          />

          {editing ? (
            <div className="space-y-4">
              <Input
                disabled
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="File name"
              />
              <Textarea
                value={tags}
                onChange={(e) => setTags(e.target.value)}
                placeholder="Tags (comma separated)"
              />
              <div className="flex gap-2">
                <Button type="submit" onClick={handleUpdate} disabled={loading}>
                  {loading ? <Loader2 className="animate-spin h-5 w-5" /> : "Save Changes"}
                </Button>
                <Button variant="outline" onClick={() => setEditing(false)}>
                  Cancel
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              <h2 className="text-xl font-semibold">{imageDetails.name}</h2>
              {/* <p className="text-sm text-muted-foreground">{imageDetails.views} views</p> */}
              <div className="flex flex-wrap gap-2 mt-2">
                {imageDetails.tags
                  ? imageDetails.tags.split(",").map((tag: string, index: number) => (
                    <span
                      key={index}
                      className="text-xs bg-primary text-secondary px-2 py-1 rounded-full"
                    >
                      #{tag}
                    </span>
                  ))
                  : null}
              </div>
              <div className="flex gap-2 mt-4">
                <Button variant="secondary" onClick={() => setEditing(true)}>
                  Edit
                </Button>
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button variant="destructive">Delete</Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                      <AlertDialogDescription>
                        This action cannot be undone. This will permanently delete your image and
                        remove your data from our servers.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>Cancel</AlertDialogCancel>
                      <AlertDialogAction onClick={handleDelete}>
                        {loading ? <Loader2 className="animate-spin h-5 w-5" /> : "Delete"}
                      </AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default FileView;

File: src/components/FileUpload/FileUpload.tsx
--------------------------------------------------
Content of src/components/FileUpload/FileUpload.tsx:
import React, { useState } from "react";
import { useDropzone } from "react-dropzone";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Upload } from "lucide-react";
import { useDispatch, useSelector } from "react-redux";
import { setFileUploaded } from "@/redux/slices/fileSlice";
import { postFilesUpload } from "@/generated";
import { RootState } from "@/redux/store";
import logger from "@/common/pino";
import clsx from "clsx";

export const FileUpload: React.FC = () => {
  const userId = useSelector((state: RootState) => state.user.id);
  const authToken = useSelector((state: RootState) => state.auth.token);
  const [tags, setTags] = useState<string[]>([]);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [loading, setLoading] = useState(false);
  const dispatch = useDispatch();
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    onDrop: (acceptedFiles: File[]) => {
      setUploadedFiles(acceptedFiles);
    },
  });

  const handleTagChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setTags(event.target.value.split(","));
  };

  const handleUpload = async () => {
    if (uploadedFiles.length === 0) {
      return toast.error("No files selected!");
    }

    setLoading(true);
    const loadingToast = toast.loading("Uploading files...");

    try {
      for (const file of uploadedFiles) {
        // eslint-disable-next-line  no-await-in-loop
        const { error } = await postFilesUpload({
          body: {
            userId,
            name: file.name,
            file,
            tags: tags.join(","),
          },
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        });
        if (error) {
          throw new Error((error as { message?: string }).message || "An unknown error occurred");
        }
      }

      toast.success("Files uploaded successfully!", { id: loadingToast });
      dispatch(setFileUploaded());
      setUploadedFiles([]);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      logger.error(error.message);
      toast.error(`Upload failed: ${error.message}`, { id: loadingToast });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="p-6">
      <CardHeader>
        <CardTitle>File Upload</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Dropzone */}
        <div
          {...getRootProps()}
          className={clsx(
            "border-2 border-dashed rounded-lg transition-all duration-200 ease-in-out p-10 cursor-pointer text-center",
            isDragActive ? "border-primary bg-muted" : "border-muted hover:border-primary/80",
          )}
        >
          <input {...getInputProps()} />
          <div className="flex flex-col items-center space-y-3">
            <div className="flex items-center justify-center w-12 h-12 rounded-full bg-muted">
              <Upload className="text-primary" />
            </div>
            <p className="text-sm">
              <span className="text-primary font-medium">Click to upload</span> or drag & drop
            </p>
            <p className="text-xs text-muted-foreground">JPEG, PNG, JPG, GIF (Max: 10MB)</p>
          </div>
        </div>

        {/* Selected Files */}
        {uploadedFiles.length > 0 && (
          <div className="mt-4 space-y-2">
            <h4 className="text-base font-medium">Selected Files:</h4>
            {uploadedFiles.map((file, index) => (
              <div key={index} className="text-sm text-muted-foreground">
                {file.name}
              </div>
            ))}
          </div>
        )}

        {/* Tags + Upload */}
        <div className="flex w-full max-w-sm items-center space-x-2 mt-4">
          <Input type="text" placeholder="Tags (comma separated)" onChange={handleTagChange} />
          <Button onClick={handleUpload} disabled={loading}>
            {loading ? (
              <>
                <Loader2 className="animate-spin mr-2 h-5 w-5" />
                Uploading
              </>
            ) : (
              "Upload Files"
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};


File: src/components/FileUpload/FileList.tsx
--------------------------------------------------
Content of src/components/FileUpload/FileList.tsx:
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { resetFileUploaded } from "../../redux/slices/fileSlice";
import { RootState } from "../../redux/store";
import { ImageViewer } from "../ImageViewer";
import { Files, getFilesUserByUserId } from "@/generated";

export const FileList: React.FC = () => {
  const [files, setFiles] = useState<Files[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>("");
  const dispatch = useDispatch();
  const userId = useSelector((state: RootState) => state.user.id);
  const isFileUploaded = useSelector((state: RootState) => state.file.isFileUploaded);

  useEffect(() => {
    const fetchFiles = async () => {
      try {
        const { data: filesResponse } = await getFilesUserByUserId({
          path: {
            userId
          }
        });
        if (filesResponse && filesResponse?.success && filesResponse?.data) {
          setFiles(filesResponse.data);
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
      } catch (_) {
        setError("Files not found!");
      } finally {
        setLoading(false);
      }
    };

    fetchFiles();
    if (isFileUploaded) {
      fetchFiles();
      dispatch(resetFileUploaded());
    }
  }, [isFileUploaded, dispatch]);

  if (loading) {
    return <h2 className="text-xl">Loading files...</h2>;
  }
  if (error) {
    return <h2 className="text-xl">{error}</h2>;
  }

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">Image Gallery</h1>
      <ImageViewer images={files} />
    </div>
  );
};


File: src/components/Header/Header.tsx
--------------------------------------------------
Content of src/components/Header/Header.tsx:
import React from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { LogOut, Moon, Settings, Sun } from "lucide-react";
import { Button } from "../ui/button";
import { Label } from "../ui/label";
import { Logo } from "../Logo";
import { logout } from "@/redux/slices/authSlice";
import { remove } from "@/redux/slices/userSlice";
import { useTheme } from "next-themes";

export const Header: React.FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const user = useSelector((state: RootState) => state.user);
  const { theme, setTheme } = useTheme();
  const initials = (user.name ? user.name : "T A")
    .trim()
    .split(/\s+/)
    .map((word: string) => word[0].toUpperCase())
    .join("");

  const handleLogout = () => {
    dispatch(logout());
    dispatch(remove());
    navigate("/login");
  };

  const handleSettings = () => {
    navigate("/settings");
  };

  const goToDashboard = () => {
    navigate("/dashboard");
  };

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  return (
    <header className="w-full px-6 py-4 border-b bg-background flex items-center justify-between">
      {/* Logo */}
      <div
        onClick={goToDashboard}
        className="text-xl font-bold text-primary tracking-wide cursor-pointer"
      >
        <Logo />
      </div>

      {/* Actions */}
      <div className="flex items-center space-x-4">
        {/* Dark mode toggle */}
        <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle Theme">
          {theme === "dark" ? (
            <Sun className="h-[1.2rem] w-[1.2rem]" />
          ) : (
            <Moon className="h-[1.2rem] w-[1.2rem]" />
          )}
        </Button>

        {/* Avatar + Dropdown */}
        <DropdownMenu>
          <DropdownMenuTrigger>
            <Avatar>
              <AvatarImage src="https://i.pravatar.cc/300" alt="User" />
              <AvatarFallback>{initials}</AvatarFallback>
            </Avatar>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-40 mt-2">
            <DropdownMenuLabel>{initials}</DropdownMenuLabel>
            <Label className="px-2 py-1.5 dark:text-white text-gray-500">{user.email}</Label>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={handleSettings}>
              <Settings className="w-4 h-4 mr-2" /> Settings
            </DropdownMenuItem>
            <DropdownMenuItem onClick={handleLogout}>
              <LogOut className="w-4 h-4 mr-2" /> Logout
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  );
};


File: src/hooks/useSettings.tsx
--------------------------------------------------
Content of src/hooks/useSettings.tsx:
// Import { useForm } from "react-hook-form";
// Import { yupResolver } from "@hookform/resolvers/yup";
// Import { useDispatch, useSelector } from "react-redux";
// Import * as yup from "yup";
// Import { axiosClient } from "../common/axios";
// Import { remove, save } from "../redux/slices/userSlice";
// Import { RootState } from "../redux/store";
// Import { toast } from "react-toastify";
// Import { useState } from "react";
// Import { useNavigate } from "react-router-dom";
// Import { logout } from "../redux/slices/authSlice";
// Import { addDelay } from "@/lib/utils";

// Const schema = yup.object().shape({
//   Name: yup.string(),
//   Email: yup.string().email(),
//   Username: yup.string(),
//   PhoneNumber: yup.string(),
//   Bio: yup.string(),
// });

// Interface SettingsForm {
//   Name?: string;
//   Email?: string;
//   Username?: string;
//   PhoneNumber?: string;
//   Bio?: string;
// }

// Export const useSettings = () => {
//   Const [isLoading, setIsLoading] = useState(false);
//   Const user = useSelector((state: RootState) => state.user);
//   Const navigate = useNavigate();
//   Const dispatch = useDispatch();
//   Const {
//     Register,
//     HandleSubmit,
//     FormState: { errors },
//   } = useForm<SettingsForm>({
//     Resolver: yupResolver(schema),
//     DefaultValues: {
//       Name: user.name || "",
//       Email: user.email || "",
//       PhoneNumber: user.phoneNumber || "",
//       Bio: user.bio || "",
//     },
//   });

//   Const onSubmit = async (submitData: SettingsForm) => {
//     Try {
//       SetIsLoading(true);
//       Const { data } = await axiosClient.put(`/users/${user.id}`, submitData);
//       Dispatch(
//         Save({
//           Id: data.uuid,
//           Email: data.email,
//           Name: data.name,
//           PhoneNumber: data.phoneNumber,
//           Bio: data.bio,
//         }),
//       );
//       Await addDelay(500);
//       Toast.success("Settings updated successfully");
//       // eslint-disable-next-line @typescript-eslint/no-explicit-any
//     } catch (error: any) {
//       Logger.error(error.message || "Login failed");
//     } finally {
//       SetIsLoading(false);
//     }
//   };

//   Const deleteAccount = async () => {
//     Try {
//       SetIsLoading(true);
//       Await axiosClient.delete(`/users/${user.id}`);
//     } catch (error) {
//       Logger.error("Error deleting account:", error);
//     } finally {
//       SetIsLoading(true);
//       Toast.success("Account deleted successfully");
//       Dispatch(logout());
//       Dispatch(remove());
//       Navigate("/login");
//     }
//   };

//   Return {
//     Register,
//     HandleSubmit,
//     OnSubmit,
//     Errors,
//     IsLoading,
//     DeleteAccount,
//   };
// };


File: src/lib/utils.ts
--------------------------------------------------
Content of src/lib/utils.ts:
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import { jwtDecode } from "jwt-decode";
import logger from "@/common/pino";
import { DecodedToken } from "@/types/types";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const addDelay = async (delay: number) => {
  // eslint-disable-next-line no-promise-executor-return
  return new Promise((res) => setTimeout(res, delay));
};

export const isTokenValid = (token: string | null): boolean => {
  if (!token) {
    return false;
  }

  try {
    const decoded: DecodedToken = jwtDecode(token);
    const currentTime = Date.now() / 1000; // Current time in seconds
    return decoded.exp > currentTime;
  } catch (error) {
    logger.error(error);
    return false;
  }
};


File: src/assets/logo-dark.png
--------------------------------------------------
Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte. Content skipped.


File: src/assets/logo.png
--------------------------------------------------
Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte. Content skipped.


File: src/pages/Settings.tsx
--------------------------------------------------
Content of src/pages/Settings.tsx:
import React, { useEffect, useState } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { zodResolver } from "@hookform/resolvers/zod";
import { Controller, useForm } from "react-hook-form";
import { settingsSchema, SettingsSchema } from "@/schemas/settings.schema";
const PhoneInput = React.lazy(() => import('react-phone-number-input'));
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useDispatch, useSelector } from "react-redux";
import { remove, save } from "@/redux/slices/userSlice";
import { deleteUsersById, getUsersById, putUsersById } from "@/generated";
import { RootState } from "@/redux/store";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { logout } from "@/redux/slices/authSlice";
import { useNavigate } from "react-router-dom";

const Settings: React.FC = () => {
  const userId = useSelector((state: RootState) => state.user.id);
  const authToken = useSelector((state: RootState) => state.auth.token);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [account, setAccount] = useState({
    name: "",
    email: "",
    phone: "",
    bio: "",
  });
  const [loading, setLoading] = useState(false);

  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm<SettingsSchema>({
    resolver: zodResolver(settingsSchema),
  });

  const onSubmit = async (submittedData: SettingsSchema) => {
    setLoading(true);
    const loadingToast = toast.loading("Updating account...");
    try {
      const { data, error } = await putUsersById({
        path: { id: userId },
        body: {
          name: submittedData.name,
          phoneNumber: submittedData.phone,
          bio: submittedData.bio,
        },
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });

      if (error) {
        const errorMessage = (error as { message?: string }).message || "An unknown error occurred";
        throw new Error(errorMessage);
      }

      if (data?.data) {
        dispatch(save(data.data));
      }

      toast.success("Account updated successfully", { id: loadingToast });
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      toast.error(`Account update failed: ${error.message}`, { id: loadingToast });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    const loadingToast = toast.loading("Deleting account...");
    try {
      const { error } = await deleteUsersById({
        path: { id: userId },
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });

      if (error) {
        const errorMessage = (error as { message?: string }).message || "An unknown error occurred";
        throw new Error(errorMessage);
      }

      toast.success("Account deleted successfully", { id: loadingToast });

      dispatch(logout());
      dispatch(remove());
      navigate("/login");
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      toast.error(`Account deleted failed: ${error.message}`, { id: loadingToast });
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      const { data, error } = await getUsersById({
        path: { id: userId },
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });

      if (error) {
        const errorMessage = (error as { message?: string }).message || "An unknown error occurred";
        throw new Error(errorMessage);
      }

      if (data?.success) {
        const updatedAccount = {
          name: data.data!.name,
          email: data.data!.email,
          phone: data.data!.phoneNumber,
          bio: data.data!.bio,
        };

        setAccount(updatedAccount);
        reset(updatedAccount);
      }
    };

    fetchData().catch((error) => toast.error(error.message));
  }, []);

  return (
    <div className="flex flex-col lg:flex-row justify-center items-start gap-8 p-6">
      <Card className="w-full max-w-xl">
        <CardHeader>
          <CardTitle>Account Settings</CardTitle>
        </CardHeader>
        <form onSubmit={handleSubmit(onSubmit)}>
          <CardContent className="space-y-4">
            {/* Name */}
            <div>
              <Label htmlFor="name" className="mb-2">
                Name
              </Label>
              <Input id="name" placeholder="John Doe" {...register("name")} />
              {errors.name && (
                <Alert variant="destructive" className="mt-2">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{errors.name.message}</AlertDescription>
                </Alert>
              )}
            </div>

            {/* Email */}
            <div>
              <Label htmlFor="email" className="mb-2">
                Email
              </Label>
              <Input id="email" disabled placeholder="you@example.com" />
            </div>

            {/* Phone */}
            <div>
              <Label htmlFor="phone" className="mb-2">
                Phone Number
              </Label>
              <Controller
                name="phone"
                control={control}
                render={({ field }) => (
                  <PhoneInput
                    {...field}
                    value={field.value}
                    onChange={field.onChange}
                    international
                    defaultCountry="US"
                    className="react-phone-input"
                    placeholder="+1 123 456 7890"
                  />
                )}
              />
              {errors.phone && (
                <Alert variant="destructive" className="mt-2">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{errors.phone.message}</AlertDescription>
                </Alert>
              )}
            </div>

            {/* Bio */}
            <div>
              <Label htmlFor="bio" className="mb-2">
                Bio
              </Label>
              <Textarea
                id="bio"
                rows={4}
                {...register("bio")}
                placeholder="Tell us about yourself"
                className="border-input rounded-md px-3 py-2 w-full text-sm bg-background text-foreground"
              />
              {errors.bio && (
                <Alert variant="destructive" className="mt-2">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{errors.bio.message}</AlertDescription>
                </Alert>
              )}
            </div>
          </CardContent>
          <CardFooter className="mt-6 justify-end">
            <Button type="submit" disabled={loading}>
              {loading ? <Loader2 className="animate-spin h-5 w-5" /> : "Save Changes"}
            </Button>
          </CardFooter>
        </form>
      </Card>

      <div className="w-full lg:w-1/3">
        <Card className="border-destructive bg-destructive/10">
          <CardHeader>
            <CardTitle className="text-destructive">Delete Account</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-destructive mb-4">
              Deleting your account will also delete all images you have uploaded.
            </p>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" className="w-full">
                  {" "}
                  Delete Account
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete your image and remove
                    your data from our servers.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleDeleteAccount}>
                    {loading ? <Loader2 className="animate-spin h-5 w-5" /> : "Delete"}
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Settings;


File: src/pages/Login.tsx
--------------------------------------------------
Content of src/pages/Login.tsx:
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { RootState } from "../redux/store";
import { useDispatch, useSelector } from "react-redux";
import { addDelay, isTokenValid } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { postAuthLogin } from "@/generated";
import { toast } from "sonner";
import { login } from "@/redux/slices/authSlice";
import { save } from "@/redux/slices/userSlice";
import { authSchema, AuthSchema } from "@/schemas/auth.schema";
import logger from "@/common/pino";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

const Login: React.FC = () => {
  const token = useSelector((state: RootState) => state.auth.token);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [loading, setLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<AuthSchema>({
    resolver: zodResolver(authSchema),
  });

  const onSubmit = async (submittedData: AuthSchema) => {
    setLoading(true);
    const loadingToast = toast.loading("Logging in...");
    try {
      const { data, error } = await postAuthLogin({ body: submittedData });

      if (error) {
        const errorMessage = (error as { message?: string }).message || "An unknown error occurred";
        throw new Error(errorMessage);
      }

      dispatch(login(data!.data!.token));
      dispatch(save(data!.data!.user));

      toast.success("Login successful!", { id: loadingToast });
      await addDelay(500);
      navigate("/dashboard");
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      logger.error(error.message);
      toast.error("Login failed. Email or Password is not correct.", {
        id: loadingToast,
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (isTokenValid(token)) {
      navigate("/dashboard");
    }
  }, [token]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-background px-4">
      <Card className="w-full max-w-sm shadow-md">
        <CardHeader>
          <CardTitle className="text-center text-2xl font-bold">Login</CardTitle>
        </CardHeader>

        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <Label htmlFor="email" className="mb-2">
                Email
              </Label>
              <Input id="email" type="text" placeholder="Enter your email" {...register("email")} />
              {errors.email && (
                <Alert variant="destructive" className="mt-2">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{errors.email.message}</AlertDescription>
                </Alert>
              )}
            </div>

            <div>
              <Label htmlFor="password" className="mb-2">
                Password
              </Label>
              <Input
                id="password"
                type="password"
                placeholder="Enter your password"
                {...register("password")}
              />
              {errors.password && (
                <Alert variant="destructive" className="mt-2">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{errors.password.message}</AlertDescription>
                </Alert>
              )}
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? <Loader2 className="animate-spin h-5 w-5" /> : "Login"}
            </Button>
          </form>
        </CardContent>

        <CardFooter className="flex flex-col items-center">
          <p className="text-sm text-muted-foreground">
            Don&apos;t have an account?{" "}
            <span
              className="text-primary hover:underline cursor-pointer"
              onClick={() => navigate("/register")}
            >
              Register
            </span>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
};

export default Login;


File: src/pages/Dashboard.tsx
--------------------------------------------------
Content of src/pages/Dashboard.tsx:
import React from "react";
import { FileList } from "../components/FileUpload/FileList";
import { FileUpload } from "../components/FileUpload/FileUpload";

const Dashboard: React.FC = () => {
  return (
    <>
      <FileUpload />
      <div className="my-10">
        <div className="divider"></div>
        <FileList />
      </div>
    </>
  );
};

export default Dashboard;

File: src/pages/Register.tsx
--------------------------------------------------
Content of src/pages/Register.tsx:
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { RootState } from "@/redux/store";
import { useDispatch, useSelector } from "react-redux";
import { addDelay, cn, isTokenValid } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Alert, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, Check, X, Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { postAuthRegister } from "@/generated";
import { toast } from "sonner";
import { login } from "@/redux/slices/authSlice";
import { save } from "@/redux/slices/userSlice";
import { registerSchema, RegisterSchema } from "@/schemas/auth.schema";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

const Register: React.FC = () => {
  const token = useSelector((state: RootState) => state.auth.token);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterSchema>({
    resolver: zodResolver(registerSchema),
  });

  const onSubmit = async (submittedData: RegisterSchema) => {
    setLoading(true);
    const loadingToast = toast.loading("Creating account...");

    try {
      const { data, error } = await postAuthRegister({ body: submittedData });

      if (error) {
        const errorMessage = (error as { message?: string }).message || "An unknown error occurred";
        throw new Error(errorMessage);
      }

      dispatch(login(data!.data!.token));
      dispatch(save(data!.data!.user));

      toast.success("Account created successfully", { id: loadingToast });
      await addDelay(500);
      navigate("/dashboard");
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      toast.error(`Account creation failed: ${error.message}`, { id: loadingToast });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (isTokenValid(token)) {
      navigate("/dashboard");
    }
  }, [token]);

  const passwordRules = [
    { regex: /.{8,}/, label: "At least 8 characters" },
    { regex: /[a-z]/, label: "One lowercase letter" },
    { regex: /[A-Z]/, label: "One uppercase letter" },
    { regex: /\d/, label: "One number" },
    { regex: /[@$!%*?&]/, label: "One special character" },
  ];

  const checkPasswordRule = (rule: { regex: RegExp }) => rule.regex.test(password);

  return (
    <div className="min-h-screen flex items-center justify-center px-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-center text-xl">Create Account</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div className="space-y-1">
              <Label htmlFor="name" className="mb-2">
                Name
              </Label>
              <Input id="name" {...register("name")} placeholder="Your full name" />
              {errors.name && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>{errors.name.message}</AlertTitle>
                </Alert>
              )}
            </div>

            <div className="space-y-1">
              <Label htmlFor="email" className="mb-2">
                Email
              </Label>
              <Input id="email" type="email" {...register("email")} placeholder="you@example.com" />
              {errors.email && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>{errors.email.message}</AlertTitle>
                </Alert>
              )}
            </div>

            <div className="space-y-1">
              <Label htmlFor="password" className="mb-2">
                Password
              </Label>
              <Input
                id="password"
                type="password"
                {...register("password")}
                placeholder="Enter a secure password"
                onChange={(e) => setPassword(e.target.value)}
              />
              <div className="space-y-1 text-sm mt-4">
                {passwordRules.map((rule, index) => (
                  <p
                    key={index}
                    className={cn(
                      "flex items-center gap-2",
                      checkPasswordRule(rule) ? "text-green-600" : "text-red-600",
                    )}
                  >
                    {checkPasswordRule(rule) ? (
                      <Check className="h-4 w-4" />
                    ) : (
                      <X className="h-4 w-4" />
                    )}
                    {rule.label}
                  </p>
                ))}
              </div>
            </div>

            <div className="space-y-1">
              <Label htmlFor="confirmPassword" className="mb-2">
                Confirm Password
              </Label>
              <Input
                id="confirmPassword"
                type="password"
                {...register("confirmPassword")}
                placeholder="Repeat your password"
              />
              {errors.confirmPassword && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>{errors.confirmPassword.message}</AlertTitle>
                </Alert>
              )}
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? <Loader2 className="animate-spin h-5 w-5" /> : "Create Account"}
            </Button>

            <p className="text-center text-sm text-muted-foreground mt-4">
              Already have an account?{" "}
              <span
                className="text-primary hover:underline cursor-pointer"
                onClick={() => navigate("/login")}
              >
                Login
              </span>
            </p>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default Register;


File: src/pages/AiBot.tsx
--------------------------------------------------
Content of src/pages/AiBot.tsx:
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";

const categories = {
  Hair: ["Hair Loss", "Hair Strength", "Early Greying", "Dandruff"],
  Skin: ["Acne", "Glow", "Anti-aging", "Dryness", "Dark Spots"],
  Stamina: ["Fatigue", "Weakness", "Male Vitality", "Female Vitality"],
  Digestion: ["Gas", "Acidity", "Constipation", "Bloating"],
  Sleep: ["Insomnia", "Anxiety", "Relaxation"],
  Immunity: ["Cold/Flu", "General Immunity", "Recovery"],
  Joints: ["Pain", "Arthritis", "Flexibility"]
};

const personalQuestions = [
  { key: "age", label: "What is your age?", type: "input" },
  { key: "gender", label: "What is your gender?", type: "options", options: ["Male", "Female", "Other"] },
  { key: "medications", label: "Are you taking any medications?", type: "options", options: ["Yes", "No"] },
  { key: "pregnant", label: "Are you pregnant (if applicable)?", type: "options", options: ["Yes", "No", "N/A"] },
  { key: "allergies", label: "Do you have any known allergies?", type: "options", options: ["Yes", "No"] },
  { key: "duration", label: "How long have you had this issue?", type: "options", options: ["<1 month", "1-6 months", ">6 months"] }
];

const AiBot: React.FC = () => {
  const [step, setStep] = useState(0);
  const [category, setCategory] = useState<keyof typeof categories | "">("");
  const [subGoal, setSubGoal] = useState("");
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [customValue, setCustomValue] = useState("");
  const [customActive, setCustomActive] = useState(false);
  const [report, setReport] = useState<{ category: string; sub_goal: string; [key: string]: any } | null>(null);

  const handleNext = () => setStep((prev) => prev + 1);
  const handleBack = () => setStep((prev) => (prev > 0 ? prev - 1 : prev));

  const handleSubmit = () => {
    const structuredReport = {
      category,
      sub_goal: subGoal,
      ...formData
    };
    setReport(structuredReport);
  };

  const handleOptionSelect = (key: string, value: string) => {
    setFormData({ ...formData, [key]: value });
    setCustomActive(false);
    setCustomValue("");
    handleNext();
  };

  const handleCustomSubmit = (key: string) => {
    if (customValue.trim()) {
      setFormData({ ...formData, [key]: customValue.trim() });
      setCustomActive(false);
      setCustomValue("");
      handleNext();
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-50 p-6">
      <Card className="w-full max-w-lg shadow-lg rounded-2xl">
        <CardContent className="p-6 space-y-6">
          {!report && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
              {/* Step 0 → Category */}
              {step === 0 && (
                <>
                  <h2 className="text-xl font-semibold mb-4">What do you want to improve?</h2>
                  <div className="grid grid-cols-2 gap-2">
                    {Object.keys(categories).map((cat) => (
                      <Button
                        key={cat}
                        onClick={() => {
                          setCategory(cat as keyof typeof categories);
                          handleNext();
                        }}
                        variant={category === cat ? "default" : "outline"}
                      >
                        {cat}
                      </Button>
                    ))}
                  </div>
                </>
              )}

              {/* Step 1 → SubGoal */}
              {step === 1 && (
                <>
                  <h2 className="text-xl font-semibold mb-4">What do you want to improve in {category}?</h2>
                  <div className="grid grid-cols-2 gap-2">
                    {category && categories[category].map((sg) => (
                      <Button
                        key={sg}
                        onClick={() => {
                          setSubGoal(sg);
                          handleNext();
                        }}
                        variant={subGoal === sg ? "default" : "outline"}
                      >
                        {sg}
                      </Button>
                    ))}
                  </div>
                  <div className="mt-4 flex gap-2">
                    <Button variant="secondary" onClick={handleBack}>Back</Button>
                  </div>
                </>
              )}

              {/* Step 2+ → Personal Questions */}
              {step >= 2 && step < personalQuestions.length + 2 && (
                <>
                  <h2 className="text-xl font-semibold mb-4">
                    {personalQuestions[step - 2].label}
                  </h2>
                  {personalQuestions[step - 2].type === "input" ? (
                    <>
                      <input
                        type="text"
                        className="w-full border rounded-lg p-2"
                        value={formData[personalQuestions[step - 2].key] || ""}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            [personalQuestions[step - 2].key]: e.target.value
                          })
                        }
                      />
                      <div className="mt-4 flex gap-2">
                        <Button variant="secondary" onClick={handleBack}>Back</Button>
                        <Button onClick={handleNext}>Next</Button>
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="grid grid-cols-2 gap-2">
                        {personalQuestions[step - 2]?.options?.map((opt) => (
                          <Button
                            key={opt}
                            onClick={() => handleOptionSelect(personalQuestions[step - 2].key, opt)}
                            variant={formData[personalQuestions[step - 2].key] === opt ? "default" : "outline"}
                          >
                            {opt}
                          </Button>
                        ))}
                        <Button
                          variant={customActive ? "default" : "outline"}
                          onClick={() => setCustomActive(true)}
                        >
                          Custom
                        </Button>
                      </div>
                      {customActive && (
                        <div className="mt-3 flex gap-2">
                          <input
                            type="text"
                            className="flex-1 border rounded-lg p-2"
                            placeholder="Enter custom value"
                            value={customValue}
                            onChange={(e) => setCustomValue(e.target.value)}
                          />
                          <Button onClick={() => handleCustomSubmit(personalQuestions[step - 2].key)}>OK</Button>
                        </div>
                      )}
                      <div className="mt-4 flex gap-2">
                        <Button variant="secondary" onClick={handleBack}>Back</Button>
                      </div>
                    </>
                  )}
                </>
              )}

              {/* Final step → Submit */}
              {step === personalQuestions.length + 2 && (
                <>
                  <h2 className="text-xl font-semibold mb-4">All done!</h2>
                  <p className="text-gray-600 mb-4">Click below to generate your report.</p>
                  <div className="flex gap-2">
                    <Button variant="secondary" onClick={handleBack}>Back</Button>
                    <Button onClick={handleSubmit}>Generate Report</Button>
                  </div>
                </>
              )}
            </motion.div>
          )}

          {report && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
              <h2 className="text-xl font-semibold mb-4">Generated Report</h2>
              <pre className="bg-gray-100 p-4 rounded-xl text-sm overflow-auto">
                {JSON.stringify(report, null, 2)}
              </pre>
            </motion.div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

export default AiBot;


File: src/pages/NotFound.tsx
--------------------------------------------------
Content of src/pages/NotFound.tsx:
import React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useNavigate } from "react-router-dom";

type NotFoundProps = {
  isAuthenticated: boolean;
};

const NotFound: React.FC<NotFoundProps> = ({ isAuthenticated }) => {
  const navigate = useNavigate();
  const handleRedirect = () => {
    if (isAuthenticated) {
      navigate("/dashboard");
    } else {
      navigate("/login");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md text-center">
        <CardHeader>
          <CardTitle className="text-3xl">404 - Page Not Found</CardTitle>
          <CardDescription>
            Sorry, the page you’re looking for doesn’t exist or has been moved.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Button onClick={handleRedirect} className="w-full mt-4">
            {isAuthenticated ? "Go to Dashboard" : "Login"}
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default NotFound;


File: src/redux/store.ts
--------------------------------------------------
Content of src/redux/store.ts:
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./slices/authSlice";
import fileReducer from "./slices/fileSlice";
import userReducer from "./slices/userSlice";

const store = configureStore({
  reducer: {
    auth: authReducer,
    file: fileReducer,
    user: userReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;


File: src/redux/slices/fileSlice.ts
--------------------------------------------------
Content of src/redux/slices/fileSlice.ts:
import { createSlice } from "@reduxjs/toolkit";
import logger from "../../common/pino";

interface FileState {
  isFileUploaded: boolean;
}

const initialState: FileState = {
  isFileUploaded: false,
};

const fileSlice = createSlice({
  name: "file",
  initialState,
  reducers: {
    setFileUploaded: (state) => {
      logger.info("Dispatching setFileUploaded action with payload:", state);
      state.isFileUploaded = true;
    },
    resetFileUploaded: (state) => {
      logger.info("Dispatching resetFileUploaded action with payload:", state);
      state.isFileUploaded = false;
    },
  },
});

export const { setFileUploaded, resetFileUploaded } = fileSlice.actions;
export default fileSlice.reducer;


File: src/redux/slices/authSlice.ts
--------------------------------------------------
Content of src/redux/slices/authSlice.ts:
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import logger from "../../common/pino";
import { getTokenFromCookie, removeTokenCookie, setTokenCookie } from "../../common/cookie";

interface AuthState {
  token: string | null;
  isAuthenticated: boolean;
}

const initialState: AuthState = {
  token: getTokenFromCookie() || null,
  isAuthenticated: Boolean(getTokenFromCookie()),
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    login: (state, action: PayloadAction<string>) => {
      logger.info("Dispatching login action with payload:", action.payload);
      state.token = action.payload;
      state.isAuthenticated = true;
      setTokenCookie(action.payload);
    },
    logout: (state) => {
      logger.info("Dispatching login action with state:", state);
      state.token = null;
      state.isAuthenticated = false;
      removeTokenCookie();
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;


File: src/redux/slices/userSlice.ts
--------------------------------------------------
Content of src/redux/slices/userSlice.ts:
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { getUserFromCookie, removeUserCookie, setUserCookie } from "../../common/cookie";
import logger from "../../common/pino";
import { Users } from "@/generated";

const initialState: Users = getUserFromCookie() || {
  email: "",
  id: "",
  username: "",
  name: "",
  phoneNumber: "",
  bio: "",
};

const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    save: (state, action: PayloadAction<Users>) => {
      logger.info("Dispatching save action with payload:", action.payload);
      state.email = action.payload.email;
      state.id = action.payload.id;
      state.name = action.payload.name;
      state.phoneNumber = action.payload.phoneNumber;
      state.bio = action.payload.bio;
      setUserCookie(action.payload);
    },
    remove: (state) => {
      logger.info("Dispatching remove action with state:", state);
      state.email = "";
      state.id = "";
      state.name = "";
      state.phoneNumber = "";
      state.bio = "";
      removeUserCookie();
    },
  },
});

export const { save, remove } = userSlice.actions;
export default userSlice.reducer;


File: src/routes/route.tsx
--------------------------------------------------
Content of src/routes/route.tsx:
import React, { Suspense, lazy } from 'react';
import { Route, Routes } from "react-router-dom";
import { Loader } from "@/components/Loader";
import { AuthMiddleware } from '@/middlewares/AuthMiddleware';
import { DefaultLayout } from '@/layout/DefaultLayout';
import { useSelector } from 'react-redux';
import { RootState } from '@/redux/store';
import AiBot from '@/pages/AiBot';

const Dashboard = lazy(() => import('@/pages/Dashboard'));
const Login = lazy(() => import('@/pages/Login'));
const Register = lazy(() => import('@/pages/Register'));
const Settings = lazy(() => import('@/pages/Settings'));
const FileView = lazy(() => import('@/components/FileUpload/FileView'));
const NotFound = lazy(() => import('@/pages/NotFound'));

const AppRoutes: React.FC = () => {
  const authToken = useSelector((state: RootState) => state.auth.token);

  return (
    <Suspense fallback={<Loader />}>
      <Routes>
        {/* protected routes */}
        <Route element={<AuthMiddleware />}>
          <Route
            path="/dashboard"
            element={
              <DefaultLayout>
                <Dashboard />
              </DefaultLayout>
            }
          />
          <Route
            path="/settings"
            element={
              <DefaultLayout>
                <Settings />
              </DefaultLayout>
            }
          />
          <Route
            path="/image/:id"
            element={
              <DefaultLayout>
                <FileView />
              </DefaultLayout>
            }
          />
        </Route>

        {/* public routes */}
        <Route path="/" element={<AiBot />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="*" element={<NotFound isAuthenticated={!!authToken} />} />
      </Routes>
    </Suspense>
  );
};

export default AppRoutes;


