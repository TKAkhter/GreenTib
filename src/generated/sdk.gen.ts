// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetHealthData, GetHealthResponse, GetHealthClearCacheData, GetHealthClearCacheResponse, GetHealthClearLogsData, GetHealthClearLogsResponse, PostAuthLoginData, PostAuthLoginResponse, PostAuthRegisterData, PostAuthRegisterResponse, PostAuthExtendTokenData, PostAuthExtendTokenResponse, GetAuthLogoutData, GetAuthLogoutResponse, PostAuthForgotPasswordData, PostAuthForgotPasswordResponse, PostAuthResetPasswordData, PostAuthResetPasswordResponse, GetUsersData, GetUsersResponse, PostUsersData, PostUsersResponse, PostUsersImportData, PostUsersImportResponse, GetUsersExportData, GetUsersExportResponse, DeleteUsersByIdData, DeleteUsersByIdResponse, GetUsersByIdData, GetUsersByIdResponse, PutUsersByIdData, PutUsersByIdResponse, GetUsersEmailByEmailData, GetUsersEmailByEmailResponse, PostUsersFindData, PostUsersFindResponse, DeleteUsersBulkData, DeleteUsersBulkResponse, GetFilesData, GetFilesResponse, DeleteFilesByIdData, DeleteFilesByIdResponse, GetFilesByIdData, GetFilesByIdResponse, PutFilesByIdData, PutFilesByIdResponse, GetFilesUserByUserIdData, GetFilesUserByUserIdResponse, PostFilesFindData, PostFilesFindResponse, PostFilesUploadData, PostFilesUploadResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get health check
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponse, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Clear cache
 */
export const getHealthClearCache = <ThrowOnError extends boolean = false>(options?: Options<GetHealthClearCacheData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthClearCacheResponse, unknown, ThrowOnError>({
        url: '/health/clear-cache',
        ...options
    });
};

/**
 * Clear log files
 */
export const getHealthClearLogs = <ThrowOnError extends boolean = false>(options?: Options<GetHealthClearLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthClearLogsResponse, unknown, ThrowOnError>({
        url: '/health/clear-logs',
        ...options
    });
};

/**
 * Login
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthLoginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRegisterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Extend Token
 */
export const postAuthExtendToken = <ThrowOnError extends boolean = false>(options?: Options<PostAuthExtendTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthExtendTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/extend-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout
 */
export const getAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<GetAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

/**
 * Forgot Password
 */
export const postAuthForgotPassword = <ThrowOnError extends boolean = false>(options?: Options<PostAuthForgotPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthForgotPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset Password
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(options?: Options<PostAuthResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthResetPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all Users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create Users
 */
export const postUsers = <ThrowOnError extends boolean = false>(options?: Options<PostUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import Users
 */
export const postUsersImport = <ThrowOnError extends boolean = false>(options?: Options<PostUsersImportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersImportResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Export Users
 */
export const getUsersExport = <ThrowOnError extends boolean = false>(options?: Options<GetUsersExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersExportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/export',
        ...options
    });
};

/**
 * Delete Users
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get Users by id
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update Users
 */
export const putUsersById = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Users by email
 */
export const getUsersEmailByEmail = <ThrowOnError extends boolean = false>(options: Options<GetUsersEmailByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersEmailByEmailResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/email/{email}',
        ...options
    });
};

/**
 * Find Users by query
 */
export const postUsersFind = <ThrowOnError extends boolean = false>(options?: Options<PostUsersFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUsersFindResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/find',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Users in bulk
 */
export const deleteUsersBulk = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersBulkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUsersBulkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all Files
 */
export const getFiles = <ThrowOnError extends boolean = false>(options?: Options<GetFilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files',
        ...options
    });
};

/**
 * Delete Files
 */
export const deleteFilesById = <ThrowOnError extends boolean = false>(options: Options<DeleteFilesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFilesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/{id}',
        ...options
    });
};

/**
 * Get Files by id
 */
export const getFilesById = <ThrowOnError extends boolean = false>(options: Options<GetFilesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFilesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/{id}',
        ...options
    });
};

export const putFilesById = <ThrowOnError extends boolean = false>(options: Options<PutFilesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutFilesByIdResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/{id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get Files by userId
 */
export const getFilesUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetFilesUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFilesUserByUserIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/user/{userId}',
        ...options
    });
};

/**
 * Find Files by query
 */
export const postFilesFind = <ThrowOnError extends boolean = false>(options?: Options<PostFilesFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostFilesFindResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/find',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Files
 */
export const postFilesUpload = <ThrowOnError extends boolean = false>(options?: Options<PostFilesUploadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostFilesUploadResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/files/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};